package com.pouffydev.the_edge.foundation.data.world.biome.gen_layer;

import com.pouffydev.the_edge.foundation.data.world.biome.BiomeKeys;
import com.pouffydev.the_edge.foundation.data.world.biome.TEBiomeProvider;
import com.pouffydev.the_edge.foundation.data.world.biome.gen_layer.layer.area.Area;
import com.pouffydev.the_edge.foundation.data.world.biome.gen_layer.layer.context.Context;
import com.pouffydev.the_edge.foundation.data.world.biome.gen_layer.layer.traits.AreaTransformer2;
import com.pouffydev.the_edge.foundation.data.world.biome.gen_layer.layer.traits.DimensionOffset0Transformer;
import net.minecraft.core.Registry;
import net.minecraft.world.level.biome.Biome;

public enum GenLayerTERiverMix implements AreaTransformer2, DimensionOffset0Transformer {
    
    INSTANCE;

//	private GenLayer biomeLayer;
//	private GenLayer riverLayer;

//	public GenLayerTFRiverMix(long seed, GenLayer biomeLayer, GenLayer riverLayer) {
//		super(seed);
//		this.biomeLayer = biomeLayer;
//		this.riverLayer = riverLayer;
//	}
    
    private Registry<Biome> registry;
    
    GenLayerTERiverMix() { }
    
    public GenLayerTERiverMix setup(Registry<Biome> registry) {
        this.registry = registry;
        return this;
    }
    
    /**
     * Returns a list of integer values generated by this layer. These may be
     * interpreted as temperatures, rainfall amounts, or biomeList[] indices
     * based on the particular GenLayer subclass.
     */
//	@Override
//	public int[] getInts(int x, int z, int width, int depth) {
//
//		int[] biomeInputs = this.biomeLayer.getInts(x, z, width, depth);
//		int[] riverInputs = this.riverLayer.getInts(x, z, width, depth);
//		int[] outputs = IntCache.getIntCache(width * depth);
//
//		int stream = Biome.getIdForBiome(TFBiomes.stream);
//
//		for (int i = 0; i < width * depth; ++i) {
//			if (riverInputs[i] == stream) {
//				outputs[i] = riverInputs[i] & 255;
//			} else {
//				outputs[i] = biomeInputs[i];
//			}
//		}
//
//		return outputs;
//	}
    
    
    @Override
    public int applyPixel(Context iNoiseRandom, Area area1, Area area2, int val1, int val2) {
        int biomeInputs = area1.get(this.getParentX(val1), this.getParentY(val2));
        int riverInputs = area2.get(this.getParentX(val1), this.getParentY(val2));
        
        int stream = TEBiomeProvider.getBiomeId(BiomeKeys.starryStream, registry);
        
        if (riverInputs == stream) {
            return riverInputs;
        } else {
            return biomeInputs;
        }
    }
}
